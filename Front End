// client/package.json

{

  "name": "naanmudhalvan-client",

  "version": "1.0.0",

  "private": true,

  "scripts": {

    "dev": "vite",

    "build": "vite build",

    "preview": "vite preview"

  },

  "dependencies": {

    "react": "^18.2.0",

    "react-dom": "^18.2.0",

    "axios": "^1.4.0"

  },

  "devDependencies": {

    "vite": "^5.0.0",

    "tailwindcss": "^4.0.0",

    "postcss": "^8.4.0",

    "autoprefixer": "^10.4.0"

  }

}



<!-- client/index.html -->

<!doctype html>

<html>

  <head>

    <meta charset="utf-8" />

    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <title>Naan Mudhalvan</title>

  </head>

  <body>

    <div id="root"></div>

    <script type="module" src="/src/main.jsx"></script>

  </body>

</html>



// client/tailwind.config.cjs

module.exports = {

  content: ['./index.html', './src/**/*.{js,jsx,ts,tsx}'],

  theme: { extend: {} },

  plugins: [],

};



/* client/postcss.config.cjs */

module.exports = {

  plugins: {

    tailwindcss: {},

    autoprefixer: {},

  },

};



// client/src/main.jsx

import React from 'react'

import { createRoot } from 'react-dom/client'

import App from './App'

import './index.css'



createRoot(document.getElementById('root')).render(<App />)



/* client/src/index.css */

@tailwind base;

@tailwind components;

@tailwind utilities;



body { @apply bg-slate-50; }



// client/src/App.jsx

import React, { useState, useEffect } from 'react';

import axios from 'axios';



export default function App() {

  const [movies, setMovies] = useState([]);

  const [query, setQuery] = useState('');

  const [genre, setGenre] = useState('All');

  const [sortBy, setSortBy] = useState('popular');

  const [isModalOpen, setIsModalOpen] = useState(false);

  const [activeMovie, setActiveMovie] = useState(null);



  // review form

  const [name, setName] = useState('');

  const [rating, setRating] = useState(5);

  const [text, setText] = useState('');

  const API = import.meta.env.VITE_API_URL || 'http://localhost:5000';



  useEffect(() => { fetchMovies(); }, []);



  const fetchMovies = async () => {

    try {

      const res = await axios.get(`${API}/api/movies`);

      setMovies(res.data);

    } catch (err) { console.error(err); }

  };



  const openModal = (movie) => {

    setActiveMovie(movie);

    setName('');

    setRating(5);

    setText('');

    setIsModalOpen(true);

  };



  const submitReview = async () => {

    if (!activeMovie) return;

    try {

      await axios.post(`${API}/api/movies/${activeMovie._id}/reviews`, { name, rating, text });

      setIsModalOpen(false);

      fetchMovies();

    } catch (err) { console.error(err); alert('Error submitting review'); }

  };



  const avgRating = (m) => m.avgRating || 0;



  const genres = ['All', ...Array.from(new Set(movies.map(m => m.genre)))];



  const filtered = movies.filter(m =>

    (genre === 'All' ? true : m.genre === genre) &&

    (m.title.toLowerCase().includes(query.toLowerCase()) || (m.synopsis || '').toLowerCase().includes(query.toLowerCase()))

  );



  const sorted = filtered.sort((a,b) => {

    if (sortBy === 'newest') return b.year - a.year;

    if (sortBy === 'rating') return (b.avgRating||0) - (a.avgRating||0);

    return (b.reviewCount||0) - (a.reviewCount||0);

  });



  return (

    <div className="min-h-screen p-6 max-w-6xl mx-auto">

      <header className="flex items-center justify-between mb-6">

        <div>

          <h1 className="text-3xl font-extrabold">Naan Mudhalvan</h1>

          <p className="text-sm text-slate-600">Movie reviews & ratings</p>

        </div>

        <div className="flex gap-2 items-center">

          <input value={query} onChange={e=>setQuery(e.target.value)} className="border rounded px-3 py-2 w-64" placeholder="Search..." />

          <select value={genre} onChange={e=>setGenre(e.target.value)} className="border rounded px-3 py-2">

            {genres.map(g => <option key={g} value={g}>{g}</option>)}

          </select>

          <select value={sortBy} onChange={e=>setSortBy(e.target.value)} className="border rounded px-3 py-2">

            <option value="popular">Most Reviewed</option>

            <option value="rating">Top Rated</option>

            <option value="newest">Newest</option>

          </select>

        </div>

      </header>



      <main>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">

          {sorted.map(movie => (

            <article key={movie._id} className="bg-white p-4 rounded-lg shadow">

              <div className="flex gap-4">

                <div className="w-28 h-40 bg-gray-100 rounded flex items-center justify-center text-sm text-gray-400">Poster</div>

                <div className="flex-1">

                  <h2 className="text-lg font-semibold">{movie.title} <span className="text-sm text-slate-500">({movie.year})</span></h2>

                  <p className="text-sm text-slate-600 mb-2">{movie.genre}</p>

                  <p className="text-sm text-slate-700 mb-3">{movie.synopsis}</p>

                  <div className="flex items-center gap-3 mb-3">

                    <div className="flex items-center">

                      {Array.from({length:5}).map((_,i)=> <span key={i} className="mr-1">★</span>)}

                    </div>

                    <div className="text-sm text-slate-600">{avgRating(movie)} • {movie.reviewCount || 0} reviews</div>

                  </div>

                  <div className="flex gap-2">

                    <button onClick={()=>openModal(movie)} className="px-3 py-1 bg-indigo-600 text-white rounded">Add Review</button>

                    <button onClick={()=>{const el=document.getElementById('reviews_'+movie._id); if(el) el.scrollIntoView({behavior:'smooth'})}} className="px-3 py-1 border rounded">See Reviews</button>

                  </div>

                </div>

              </div>



              <div id={'reviews_'+movie._id} className="mt-4 border-t pt-3">

                {movie.reviews && movie.reviews.length === 0 ? <p className="text-sm text-slate-500">No reviews yet.</p> :

                  <ul className="space-y-3">

                    {movie.reviews.map(r=> (

                      <li key={r._id} className="bg-gray-50 p-3 rounded">

                        <div className="flex items-center justify-between mb-1">

                          <div className="font-medium">{r.name}</div>

                          <div className="text-sm text-slate-600">{new Date(r.date).toLocaleString()}</div>

                        </div>

                        <div className="mb-2">{Array.from({length:5}).map((_,i)=><span key={i} className="mr-1">{i<r.rating?'★':'☆'}</span>)}</div>

                        <div className="text-sm text-slate-700">{r.text || <i className="text-slate-400">(no comment)</i>}</div>

                      </li>

                    ))}

                  </ul>

                }

              </div>

            </article>

          ))}

        </div>

      </main>



      {isModalOpen && activeMovie && (

        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/40">

          <div className="bg-white rounded-lg shadow-lg w-full max-w-2xl p-5">

            <div className="flex items-center justify-between mb-4">

              <h3 className="text-xl font-semibold">Add Review — {activeMovie.title}</h3>

              <button onClick={()=>setIsModalOpen(false)} className="text-slate-600">Close</button>

            </div>

            <div className="space-y-3">

              <div>

                <label className="block text-sm">Your name</label>

                <input className="w-full border rounded px-3 py-2" value={name} onChange={e=>setName(e.target.value)} />

              </div>

              <div>

                <label className="block text-sm">Rating</label>

                <div className="flex items-center gap-2 mt-1">

                  {Array.from({length:5}).map((_,i)=> <button key={i} onClick={()=>setRating(i+1)} className="p-1">{i<rating?'★':'☆'}</button>)}

                  <div className="text-sm text-slate-600">{rating} / 5</div>

                </div>

              </div>

              <div>

                <label className="block text-sm">Review</label>

                <textarea className="w-full border rounded px-3 py-2" rows={4} value={text} onChange={e=>setText(e.target.value)} />

              </div>

              <div className="flex justify-end gap-2 mt-3">

                <button className="px-3 py-1 border rounded" onClick={()=>setIsModalOpen(false)}>Cancel</button>

                <button className="px-3 py-1 bg-green-600 text-white rounded" onClick={submitReview}>Submit Review</button>

              </div>

            </div>

          </div>

        </div>

      )}

    </div>

  )

}



